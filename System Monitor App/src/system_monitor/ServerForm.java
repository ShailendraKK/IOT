/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package system_monitor;


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;

import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import sun.jdbc.odbc.*;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
public class ServerForm extends javax.swing.JFrame {
private ServerSocket server;
private int port =5050;
Object id;
    ServerSocket orderupdate;
    public ServerForm() {
        initComponents();
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        TabPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableOrderSend = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18));
        jLabel1.setText("Admin Home");

        jButton3.setText("Cancel");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Refresh");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        TabPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabPaneMouseClicked(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User name", "Operation", "Date Time"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        TabPane.addTab("Hardware Moniitor", jScrollPane1);

        jTableOrderSend.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "user name", "process", "date time"
            }
        ));
        jScrollPane2.setViewportView(jTableOrderSend);

        TabPane.addTab("Software_monitor", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(121, 121, 121)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 447, Short.MAX_VALUE)
                .addComponent(jButton5)
                .addGap(61, 61, 61)
                .addComponent(jButton3)
                .addGap(53, 53, 53))
            .addComponent(TabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton5)))
                .addGap(42, 42, 42)
                .addComponent(TabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
     try
        {
            DefaultTableModel dfm=(DefaultTableModel) jTableOrderSend.getModel();
            ((DefaultTableModel)jTableOrderSend.getModel()).setNumRows(0);
            jTableOrderSend.setModel(dfm);

            Class.forName("com.mysql.jdbc.Driver");
            String user = "root";
    String password = "root";
            Connection connect = DriverManager.getConnection(

                "jdbc:mysql://localhost:3306/system_monitor",user,password);

                        String query = "select * from software_details";


            if (connect!=null)
            {
                Statement stmt = connect.createStatement();
                ResultSet rs;
                rs= stmt.executeQuery(query);

                while(rs.next())
                {
                    Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));

                    dfm.addRow(v);

                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                }
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }

        try
        {
            DefaultTableModel dfm=(DefaultTableModel) jTable1.getModel();
            ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
            jTable1.setModel(dfm);


            Class.forName("com.mysql.jdbc.Driver");
            String user = "root";
    String password = "root";
            Connection connect = DriverManager.getConnection(

                "jdbc:mysql://localhost:3306/system_monitor",user,password);
              String query = "select * from hardware_monitor";

            if (connect!=null)
            {
                Statement stmt = connect.createStatement();
                ResultSet rs;
                rs= stmt.executeQuery(query);

                while(rs.next())
                {
                    Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));


                    dfm.addRow(v);

                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                }
            }

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try
        {
         Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection connect1 = DriverManager
                    .getConnection(

                    "jdbc:odbc:Restaurent_dsn");
             Statement st=connect1.createStatement();
       st.executeUpdate("delete from order_final");
          connect1.commit();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
         try
        {
         Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection connect2 = DriverManager
                    .getConnection(

                    "jdbc:odbc:Restaurent_dsn");
             Statement st1=connect2.createStatement();
       st1.executeUpdate("delete from Order_Send");
          connect2.commit();
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }
        
    }//GEN-LAST:event_formWindowClosing

    private void TabPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabPaneMouseClicked
        // TODO add your handling code here:
        try
        {
            DefaultTableModel dfm=(DefaultTableModel) jTableOrderSend.getModel();
            ((DefaultTableModel)jTableOrderSend.getModel()).setNumRows(0);
            jTableOrderSend.setModel(dfm);

            Class.forName("com.mysql.jdbc.Driver");
            String user = "root";
    String password = "root";
            Connection connect = DriverManager.getConnection(

                "jdbc:mysql://localhost:3306/system_monitor",user,password);
    
                        String query = "select * from software_details";


            if (connect!=null)
            {
                Statement stmt = connect.createStatement();
                ResultSet rs;
                rs= stmt.executeQuery(query);

                while(rs.next())
                {
                    Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));
                  
                    dfm.addRow(v);

                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                }
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }

        try
        {
            DefaultTableModel dfm=(DefaultTableModel) jTable1.getModel();
            ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
            jTable1.setModel(dfm);


            Class.forName("com.mysql.jdbc.Driver");
            String user = "root";
    String password = "root";
            Connection connect = DriverManager.getConnection(

                "jdbc:mysql://localhost:3306/system_monitor",user,password);
              String query = "select * from hardware_monitor";

            if (connect!=null)
            {
                Statement stmt = connect.createStatement();
                ResultSet rs;
                rs= stmt.executeQuery(query);

                while(rs.next())
                {
                    Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));
                   

                    dfm.addRow(v);

                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                }
            }

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }

    }//GEN-LAST:event_TabPaneMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main( String []arg)
    {
          java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerForm().setVisible(true);

            }
        });
    }
     public void handleConnection()
    {
        System.out.println("Waiting for client message");
        while(true)
        {
            try {
                
                Socket socket=server.accept();
                new ConnectionHandlernew(socket);
                
            } catch (Exception e) {
                e.printStackTrace();
            }
            
        }
    }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JTabbedPane TabPane;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTable jTable1;
    public static javax.swing.JTable jTableOrderSend;
    // End of variables declaration//GEN-END:variables

    public static void refresh_Admin_Table()
    {
        try
        {
            DefaultTableModel dfm=(DefaultTableModel) jTableOrderSend.getModel();
            ((DefaultTableModel)jTableOrderSend.getModel()).setNumRows(0);
            jTableOrderSend.setModel(dfm);

            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection connect = DriverManager
            .getConnection(

                "jdbc:odbc:Restaurent_dsn");
            String query = "select * from Order_Send";

            if (connect!=null)
            {
                Statement stmt = connect.createStatement();
                ResultSet rs;
                rs= stmt.executeQuery(query);

                while(rs.next())
                {
                    Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));
                    v.addElement(rs.getString(4));
                    v.addElement(rs.getString(5));
                    v.addElement(rs.getString(6));
                    v.addElement(rs.getString(7));

                    dfm.addRow(v);

                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                }
            }
        }
        catch(Exception ex)
        {
            ex.printStackTrace();
        }

        try
        {
            DefaultTableModel dfm=(DefaultTableModel) jTable1.getModel();
            ((DefaultTableModel)jTable1.getModel()).setNumRows(0);
            jTable1.setModel(dfm);

            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection connect = DriverManager
            .getConnection(

                "jdbc:odbc:Restaurent_dsn");
            String query = "select * from order_final";

            if (connect!=null)
            {
                Statement stmt = connect.createStatement();
                ResultSet rs;
                rs= stmt.executeQuery(query);

                while(rs.next())
                {
                    Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));
                    v.addElement(rs.getString(4));
                    v.addElement(rs.getString(5));
                    v.addElement(rs.getString(6));
                    v.addElement(rs.getString(7));

                    dfm.addRow(v);

                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                }
            }

        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}

class ConnectionHandlernew implements Runnable
{
    int time=0;
    public static Object[][] Data;
private Socket socket;
private BufferedReader input;
String[] columnNames={
  "Customer Name","Customer Table","Item Name","Item Quantity","Total Price"  
};
public ConnectionHandlernew(Socket socket)
{
    this.socket=socket;
    Thread t=new Thread(this);
    t.start();
     try{ t.sleep(1000);}
   catch(Exception e){}
   
}
    
    public void run() {
      try
      {
      
          // DataInputStream dis=new DataInputStream   (socket.getInputStream());
          
          this.input=new BufferedReader(new InputStreamReader(this.socket.getInputStream()));
       String message=input.readLine();
       String message_table_no=input.readLine();
       String message_item_name=input.readLine();
       String message_inst=input.readLine();
       String message_quantity=input.readLine();
       String message_total=input.readLine();
       String selection=input.readLine();
       String item_status="Order Pending";
       
       Data=new Object[][]{
            {message,message_table_no,message_item_name,message_inst,message_quantity,message_total}
       };
          
          System.out.println("Cust Name :"+message);
          System.out.println("Cust Table: "+message_table_no);
          System.out.println("Item Name: "+message_item_name);
          System.out.println("Special Instruiction: "+message_inst);
          System.out.println("Item Quantity : "+message_quantity);
          System.out.println("Total Price : "+message_total);
          
  
         Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
            Connection connect1 = DriverManager
                    .getConnection(

                    "jdbc:odbc:Restaurent_dsn");
             Statement st=connect1.createStatement();
      st.executeUpdate("insert into order_final values ((SELECT ISNULL(MAX(Order_Id)+1,0) FROM dbo.order_final WITH(SERIALIZABLE, UPDLOCK)), '"+ message + "','"+ message_table_no+ "','"+ message_item_name +"','"+ message_quantity +"','"+ message_total +"','"+ message_inst +"','"+selection+"') ");
          connect1.commit();
          int id=0;
                   try
                       
         {
             Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
              Connection con=DriverManager.getConnection("jdbc:odbc:Restaurent_dsn");
              Connection con2=DriverManager.getConnection("jdbc:odbc:Restaurent_dsn");
              Statement st2=con.createStatement();
              Statement st1=con2.createStatement();

              //st.executeUpdate("insert into FeedBack_Details values('"+cust_name+"','"+feedback+"','"+rating+"')");
       ResultSet rs1;
              ResultSet rs;

rs1=st1.executeQuery("select Item_Name from order_final ");
String item_name;

   while(rs1.next())
   {
       item_name=rs1.getString("Item_Name");
       rs= st2.executeQuery("select * from Time where Item_Name='"+item_name+"'");
                   while(rs.next())
                    {
                     time=time+rs.getInt(2);

                    //System.out.println(Table.getSelectedRow());
                    // System.out.println( Table.getModel().getValueAt(1, 1));
                    }
             }
  
         }
         catch(Exception e)
         {
             e.printStackTrace();
         }
           OutputStream os=socket.getOutputStream();
       OutputStreamWriter osw=new OutputStreamWriter(os);
       BufferedWriter bw=new BufferedWriter(osw);
       String time_temp=""+time;
       bw.write(time_temp);
       //String temp_id=""+id;
       //bw.write(temp_id);
          System.out.println("Time send to customer");
          bw.flush();

          input.close();
         socket.close();

         //  Statement st1=connect1.createStatement();
        /* st1.executeUpdate("insert into order_permanent values ( '"+ message + "','"+ message_table_no+ "','"+ message_item_name +"','"+ message_quantity +"','"+ message_total +"','"+ message_inst +"','"+selection+"') ");
          connect1.commit();*/

          DefaultTableModel dfm=(DefaultTableModel) ServerForm.jTable1.getModel();
       ((DefaultTableModel)ServerForm.jTable1.getModel()).setNumRows(0);
        ServerForm.jTable1.setModel(dfm);



       
            Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
             Connection connect = DriverManager
                    .getConnection(

                    "jdbc:odbc:Restaurent_dsn");
             String query = "select * from order_final";

             if (connect!=null)
                {
                    Statement stmt = connect.createStatement();
                    ResultSet rs;
                    rs= stmt.executeQuery(query);

                    while(rs.next())
                    {
                        Vector v=new Vector();
                    v.addElement(rs.getString(1));
                    v.addElement(rs.getString(2));
                    v.addElement(rs.getString(3));
                    v.addElement(rs.getString(4));
                    v.addElement(rs.getString(5));
                    v.addElement(rs.getString(6));
                    v.addElement(rs.getString(7));
                   v.addElement(rs.getString(8));

                    dfm.addRow(v); 


                    //System.out.println(jTable1.getSelectedRow());
                    // System.out.println( JTable1.getModel().getValueAt(1, 1));
                    }
                }
          
      }
      catch(Exception e)
        {
   e.printStackTrace();
}
      
          System.out.println("Waiting for client message");

      
    }
}


      
      
    
    

